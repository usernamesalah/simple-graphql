// Code generated by mockery v2.46.0. DO NOT EDIT.

package mockusecase

import (
	context "context"
	model "tensor-graphql/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// PowerPlantUsecase is an autogenerated mock type for the PowerPlantUsecase type
type PowerPlantUsecase struct {
	mock.Mock
}

// CreatePowerPlant provides a mock function with given fields: ctx, powerplant
func (_m *PowerPlantUsecase) CreatePowerPlant(ctx context.Context, powerplant *model.PowerPlant) error {
	ret := _m.Called(ctx, powerplant)

	if len(ret) == 0 {
		panic("no return value specified for CreatePowerPlant")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.PowerPlant) error); ok {
		r0 = rf(ctx, powerplant)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPowerPlantByID provides a mock function with given fields: ctx, powerplantID
func (_m *PowerPlantUsecase) GetPowerPlantByID(ctx context.Context, powerplantID string) (*model.PowerPlant, error) {
	ret := _m.Called(ctx, powerplantID)

	if len(ret) == 0 {
		panic("no return value specified for GetPowerPlantByID")
	}

	var r0 *model.PowerPlant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.PowerPlant, error)); ok {
		return rf(ctx, powerplantID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.PowerPlant); ok {
		r0 = rf(ctx, powerplantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PowerPlant)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, powerplantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPowerPlants provides a mock function with given fields: ctx, page, limit
func (_m *PowerPlantUsecase) GetPowerPlants(ctx context.Context, page int, limit int) ([]*model.PowerPlant, int, error) {
	ret := _m.Called(ctx, page, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetPowerPlants")
	}

	var r0 []*model.PowerPlant
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]*model.PowerPlant, int, error)); ok {
		return rf(ctx, page, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []*model.PowerPlant); ok {
		r0 = rf(ctx, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.PowerPlant)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) int); ok {
		r1 = rf(ctx, page, limit)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, int) error); ok {
		r2 = rf(ctx, page, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdatePowerPlant provides a mock function with given fields: ctx, powerplant
func (_m *PowerPlantUsecase) UpdatePowerPlant(ctx context.Context, powerplant *model.PowerPlant) error {
	ret := _m.Called(ctx, powerplant)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePowerPlant")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.PowerPlant) error); ok {
		r0 = rf(ctx, powerplant)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPowerPlantUsecase creates a new instance of PowerPlantUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPowerPlantUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *PowerPlantUsecase {
	mock := &PowerPlantUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
