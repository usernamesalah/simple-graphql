// Code generated by mockery v2.46.0. DO NOT EDIT.

package mockrepository

import (
	context "context"
	model "tensor-graphql/internal/model"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// PowerPlantRepository is an autogenerated mock type for the PowerPlantRepository type
type PowerPlantRepository struct {
	mock.Mock
}

// AddSortQuery provides a mock function with given fields: query, allowedFields, sortBy
func (_m *PowerPlantRepository) AddSortQuery(query string, allowedFields []string, sortBy string) (string, error) {
	ret := _m.Called(query, allowedFields, sortBy)

	if len(ret) == 0 {
		panic("no return value specified for AddSortQuery")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []string, string) (string, error)); ok {
		return rf(query, allowedFields, sortBy)
	}
	if rf, ok := ret.Get(0).(func(string, []string, string) string); ok {
		r0 = rf(query, allowedFields, sortBy)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, []string, string) error); ok {
		r1 = rf(query, allowedFields, sortBy)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddSortQueryWithPrefix provides a mock function with given fields: query, allowedFields, sortBy
func (_m *PowerPlantRepository) AddSortQueryWithPrefix(query string, allowedFields map[string]string, sortBy string) (string, error) {
	ret := _m.Called(query, allowedFields, sortBy)

	if len(ret) == 0 {
		panic("no return value specified for AddSortQueryWithPrefix")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, map[string]string, string) (string, error)); ok {
		return rf(query, allowedFields, sortBy)
	}
	if rf, ok := ret.Get(0).(func(string, map[string]string, string) string); ok {
		r0 = rf(query, allowedFields, sortBy)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, map[string]string, string) error); ok {
		r1 = rf(query, allowedFields, sortBy)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Begin provides a mock function with given fields:
func (_m *PowerPlantRepository) Begin() (*sql.Tx, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 *sql.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func() (*sql.Tx, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *sql.Tx); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Commit provides a mock function with given fields: tx
func (_m *PowerPlantRepository) Commit(tx *sql.Tx) error {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePowerPlant provides a mock function with given fields: ctx, tx, powerPlant
func (_m *PowerPlantRepository) CreatePowerPlant(ctx context.Context, tx *sql.Tx, powerPlant *model.PowerPlant) error {
	ret := _m.Called(ctx, tx, powerPlant)

	if len(ret) == 0 {
		panic("no return value specified for CreatePowerPlant")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, *model.PowerPlant) error); ok {
		r0 = rf(ctx, tx, powerPlant)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePowerPlant provides a mock function with given fields: ctx, tx, id
func (_m *PowerPlantRepository) DeletePowerPlant(ctx context.Context, tx *sql.Tx, id string) error {
	ret := _m.Called(ctx, tx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeletePowerPlant")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, string) error); ok {
		r0 = rf(ctx, tx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exec provides a mock function with given fields: ctx, tx, query, args
func (_m *PowerPlantRepository) Exec(ctx context.Context, tx *sql.Tx, query string, args []interface{}) (sql.Result, error) {
	ret := _m.Called(ctx, tx, query, args)

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 sql.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, string, []interface{}) (sql.Result, error)); ok {
		return rf(ctx, tx, query, args)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, string, []interface{}) sql.Result); ok {
		r0 = rf(ctx, tx, query, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, string, []interface{}) error); ok {
		r1 = rf(ctx, tx, query, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOffset provides a mock function with given fields: page, limit
func (_m *PowerPlantRepository) GetOffset(page int, limit int) int {
	ret := _m.Called(page, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetOffset")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func(int, int) int); ok {
		r0 = rf(page, limit)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetPowerPlantByID provides a mock function with given fields: ctx, id
func (_m *PowerPlantRepository) GetPowerPlantByID(ctx context.Context, id string) (*model.PowerPlant, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPowerPlantByID")
	}

	var r0 *model.PowerPlant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.PowerPlant, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.PowerPlant); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PowerPlant)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPowerPlants provides a mock function with given fields: ctx, page, limit
func (_m *PowerPlantRepository) GetPowerPlants(ctx context.Context, page int, limit int) ([]*model.PowerPlant, int, error) {
	ret := _m.Called(ctx, page, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetPowerPlants")
	}

	var r0 []*model.PowerPlant
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]*model.PowerPlant, int, error)); ok {
		return rf(ctx, page, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []*model.PowerPlant); ok {
		r0 = rf(ctx, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.PowerPlant)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) int); ok {
		r1 = rf(ctx, page, limit)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, int) error); ok {
		r2 = rf(ctx, page, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Master provides a mock function with given fields:
func (_m *PowerPlantRepository) Master() *sql.DB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Master")
	}

	var r0 *sql.DB
	if rf, ok := ret.Get(0).(func() *sql.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.DB)
		}
	}

	return r0
}

// NewNullString provides a mock function with given fields: str
func (_m *PowerPlantRepository) NewNullString(str *string) sql.NullString {
	ret := _m.Called(str)

	if len(ret) == 0 {
		panic("no return value specified for NewNullString")
	}

	var r0 sql.NullString
	if rf, ok := ret.Get(0).(func(*string) sql.NullString); ok {
		r0 = rf(str)
	} else {
		r0 = ret.Get(0).(sql.NullString)
	}

	return r0
}

// Query provides a mock function with given fields: ctx, query, dest, args
func (_m *PowerPlantRepository) Query(ctx context.Context, query string, dest []interface{}, args []interface{}) error {
	ret := _m.Called(ctx, query, dest, args)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []interface{}, []interface{}) error); ok {
		r0 = rf(ctx, query, dest, args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Rollback provides a mock function with given fields: tx
func (_m *PowerPlantRepository) Rollback(tx *sql.Tx) error {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Slave provides a mock function with given fields:
func (_m *PowerPlantRepository) Slave() *sql.DB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Slave")
	}

	var r0 *sql.DB
	if rf, ok := ret.Get(0).(func() *sql.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.DB)
		}
	}

	return r0
}

// UpdatePowerPlant provides a mock function with given fields: ctx, tx, powerPlant
func (_m *PowerPlantRepository) UpdatePowerPlant(ctx context.Context, tx *sql.Tx, powerPlant *model.PowerPlant) error {
	ret := _m.Called(ctx, tx, powerPlant)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePowerPlant")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, *model.PowerPlant) error); ok {
		r0 = rf(ctx, tx, powerPlant)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPowerPlantRepository creates a new instance of PowerPlantRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPowerPlantRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PowerPlantRepository {
	mock := &PowerPlantRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
